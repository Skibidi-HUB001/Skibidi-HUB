local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local flying = false
local flySpeed = 200
local noclip = false

local Window = Fluent:CreateWindow({
    Title = "Skibidi HUB " .. Fluent.Version,
    SubTitle = "Super Premium",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})


local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local walking = false
local walkSpeed = 16

-- Slider for WalkSpeed
local Slider = Tabs.Main:AddSlider("WalkspeedSlider", {
    Title = "Walkspeed Bypass",
    Description = "‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô (Bypass)",
    Default = 95,
    Min = 10,
    Max = 150,
    Rounding = 1,
    Callback = function(s)
        walkSpeed = s
    end
})

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á Keybind Toggle Walkspeed
local WalkspeedKeybind = Tabs.Main:AddKeybind("WalkspeedKeybind", {
    Title = "Toggle Walkspeed (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ)",
    Mode = "Toggle", -- ‡πÇ‡∏´‡∏°‡∏î Toggle
    Default = "F3",  -- ‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    Callback = function()
        walking = not walking
        if walking then
            task.spawn(function()
                while walking and player.Character and hrp do
                    local moveDir = Vector3.new()
                    local cam = workspace.CurrentCamera

                    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                        moveDir += cam.CFrame.LookVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                        moveDir -= cam.CFrame.LookVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                        moveDir -= cam.CFrame.RightVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                        moveDir += cam.CFrame.RightVector
                    end

                    moveDir = Vector3.new(moveDir.X, 0, moveDir.Z)
                    if moveDir.Magnitude > 0 then
                        hrp.Velocity = moveDir.Unit * walkSpeed + Vector3.new(0, hrp.Velocity.Y, 0)
                    else
                        hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
                    end
                    RunService.RenderStepped:Wait()
                end
            end)
        else
            if hrp then
                hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
            end
        end
    end,

    -- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    ChangedCallback = function(newKey)
        print("üü¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏° Toggle Walkspeed ‡πÄ‡∏õ‡πá‡∏ô:", newKey)
    end
})

-------------------------fly
local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Flyspeed Change",
        Description = "‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß",
        Default = 30,
        Min = 20,
        Max = 30,
        Rounding = 1,
        Callback = function(s)
            flySpeed = s
        end
    })
Slider:OnChanged(function(s)
        flySpeed = s
    end)
Tabs.Main:AddButton({
        Title = "Fly",
        Description = "Press to fly",
        Callback = function()
            flying = not flying
            while flying do
                local moveDir = Vector3.new(0, 0, 0)
                local cam = workspace.CurrentCamera
                                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                                    moveDir = moveDir + cam.CFrame.LookVector
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                                    moveDir = moveDir - cam.CFrame.LookVector
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                                    moveDir = moveDir - cam.CFrame.RightVector
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                                    moveDir = moveDir + cam.CFrame.RightVector
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.RightShift) then
                                    moveDir = moveDir + Vector3.new(0, 1, 0)
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.RightControl) then
                                    moveDir = moveDir - Vector3.new(0, 1, 0)
                                end
                                if moveDir.Magnitude > 0 then
                                    moveDir = moveDir.Unit * flySpeed
                                end
                                humanoidRootPart.Velocity = moveDir
                                RunService.RenderStepped:Wait()
                                end
        end
})
    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "Fly",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "F4", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            flying = not flying
            while flying do
                local moveDir = Vector3.new(0, 0, 0)
                local cam = workspace.CurrentCamera
                                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                                    moveDir = moveDir + cam.CFrame.LookVector
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                                    moveDir = moveDir - cam.CFrame.LookVector
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                                    moveDir = moveDir - cam.CFrame.RightVector
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                                    moveDir = moveDir + cam.CFrame.RightVector
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.RightShift) then
                                    moveDir = moveDir + Vector3.new(0, 1, 0)
                                end
                                if UserInputService:IsKeyDown(Enum.KeyCode.RightControl) then
                                    moveDir = moveDir - Vector3.new(0, 1, 0)
                                end
                                if moveDir.Magnitude > 0 then
                                    moveDir = moveDir.Unit * flySpeed
                                end
                                humanoidRootPart.Velocity = moveDir
                                RunService.RenderStepped:Wait()
                                end
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)
	local aimbotEnabled = false
local aimPart = "Head" -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "Torso" ‡πÑ‡∏î‡πâ
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local localPlayer = Players.LocalPlayer

-- üß† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
local function getClosestPlayerToCursor()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild(aimPart) then
            local part = player.Character[aimPart]
            local screenPoint, onScreen = camera:WorldToViewportPoint(part.Position)

            if onScreen then
                local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - UserInputService:GetMouseLocation()).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- üéØ Loop Aimbot
RunService.RenderStepped:Connect(function()
    if aimbotEnabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
        local target = getClosestPlayerToCursor()
        if target and target.Character and target.Character:FindFirstChild(aimPart) then
            local targetPart = target.Character[aimPart]
            camera.CFrame = CFrame.new(camera.CFrame.Position, targetPart.Position)
        end
    end
end)

-- üïπÔ∏è Keybind ‡πÉ‡∏ô Fluent UI
local AimbotKeybind = Tabs.Main:AddKeybind("AimbotKeybind", {
    Title = "Toggle Aimbot (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ)",
    Mode = "Toggle",
    Default = "F2",
    Callback = function()
        aimbotEnabled = not aimbotEnabled
        print("üéØ Aimbot: " .. (aimbotEnabled and "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" or "‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"))
    end,
    ChangedCallback = function(newKey)
        print("üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏° Aimbot ‡πÄ‡∏õ‡πá‡∏ô:", newKey)
    end
})
local function shootBullet(fromPosition, direction, range)
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Ray ‡πÉ‡∏´‡∏°‡πà
    local ray = Ray.new(fromPosition, direction * range)
    
    -- ‡πÉ‡∏ä‡πâ Raycast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏ä‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    local hit, position = workspace:FindPartOnRay(ray)
    
    -- ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏ä‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if hit then
        print("‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏ä‡∏ô: ", hit.Name)
        -- ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏î‡∏≤‡πÄ‡∏°‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    else
        print("‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏û‡∏•‡∏≤‡∏î")
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏õ‡∏∑‡∏ô
-- üßØ No Recoil
local function removeRecoil()
    local cam = workspace.CurrentCamera
    local originalCFrame = cam.CFrame

    -- ‡∏£‡∏≠ 1 ‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö
    RunService.RenderStepped:Wait()
    cam.CFrame = originalCFrame
end

local function fireGun()
    local camera = workspace.CurrentCamera
    local startPosition = camera.CFrame.Position  -- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∑‡∏ô)
    local direction = (camera.CFrame.LookVector)  -- ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏∑‡∏ô‡∏´‡∏±‡∏ô‡πÑ‡∏õ (‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)
    local range = 1500  -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

    -- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á)
    local correctedDirection = camera.CFrame.LookVector

    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Ray ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    local ray = Ray.new(startPosition, correctedDirection * range)
    
    -- ‡πÉ‡∏ä‡πâ Raycast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏ä‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    local hit, position = workspace:FindPartOnRay(ray)
    
    -- ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏ä‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if hit then
        print("‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏ä‡∏ô: ", hit.Name)
        -- ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏î‡∏≤‡πÄ‡∏°‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    else
        print("‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏û‡∏•‡∏≤‡∏î")
    end

    -- üîß ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö No Recoil
    removeRecoil()
end

-- ‡∏ú‡∏π‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fireGun ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    -- ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏¥‡∏á
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        fireGun()
    end
end)
local ESPTab = Window:AddTab({ Title = "ESP", Icon = "" })

local espEnabled = false
local healthEnabled = false

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏£‡πå‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô
local function createHealthESP(player)
    if not player.Character then return end
    local char = player.Character
    if char:FindFirstChild("Humanoid") then
        local humanoid = char:WaitForChild("Humanoid")
        
        -- ‡∏™‡∏£‡πâ‡∏≤‡∏á BillboardGui ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏î
        local healthBarGui = Instance.new("BillboardGui")
        healthBarGui.Parent = char
        healthBarGui.Adornee = char:WaitForChild("HumanoidRootPart") -- ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô
        healthBarGui.Size = UDim2.new(0, 40, 0, 2) -- ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á
        healthBarGui.StudsOffset = Vector3.new(0, 2, 0) -- ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß
        healthBarGui.AlwaysOnTop = true
        
        -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏î
        local healthBar = Instance.new("Frame")
        healthBar.Parent = healthBarGui
        healthBar.Size = UDim2.new(1, 0, 1, 0)
        healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        healthBar.BorderSizePixel = 0
        
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏î
        local function updateHealth()
            local healthPercent = humanoid.Health / humanoid.MaxHealth
            healthBar.Size = UDim2.new(healthPercent, 0, 1, 0)
        end
        
        humanoid.HealthChanged:Connect(updateHealth)

        -- ‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏¢
        player.Character:WaitForChild("Humanoid").Died:Connect(function()
            healthBarGui:Destroy()
        end)
        
        -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        updateHealth()
        
        return healthBarGui -- Return the healthBarGui for easy removal later
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÉ‡∏ä‡πâ Highlight ‡πÅ‡∏ó‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
local function createESPHighlight(player)
    if not player.Character then return end
    local char = player.Character
    if char:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = char:WaitForChild("HumanoidRootPart")
        
        -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Highlight ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        local highlight = Instance.new("Highlight")
        highlight.Parent = char
        highlight.FillColor = Color3.fromRGB(255, 0, 0) -- ‡∏™‡∏µ‡πÅ‡∏î‡∏á
        highlight.FillTransparency = 0.5
        highlight.OutlineColor = Color3.fromRGB(255, 0, 0) -- ‡∏™‡∏µ‡πÅ‡∏î‡∏á
        highlight.OutlineTransparency = 0.5
        highlight.Adornee = char
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        
        -- ‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏¢
        player.Character:WaitForChild("Humanoid").Died:Connect(function()
            highlight:Destroy()
        end)
        
        return highlight -- Return highlight for easy removal later
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏∞‡∏•‡∏∏‡∏Å‡∏≥‡πÅ‡∏û‡∏á
local function enableESPForAllPlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            if espEnabled then
                local highlight = createESPHighlight(player)
                if healthEnabled then
                    local healthBarGui = createHealthESP(player)
                    player.Character:WaitForChild("Humanoid").Died:Connect(function()
                        healthBarGui:Destroy() -- ‡∏•‡∏ö health bar ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏¢
                    end)
                end
            else
                -- ‡∏•‡∏ö ESP ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
                if player.Character then
                    -- ‡∏•‡∏ö Highlight
                    local highlight = player.Character:FindFirstChildOfClass("Highlight")
                    if highlight then highlight:Destroy() end
                    -- ‡∏•‡∏ö Health ESP
                    local healthBarGui = player.Character:FindFirstChildOfClass("BillboardGui")
                    if healthBarGui then healthBarGui:Destroy() end
                end
            end
        end
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ESP ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î
local function toggleESP()
    espEnabled = not espEnabled
    enableESPForAllPlayers()
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î
local function toggleHealthESP()
    healthEnabled = not healthEnabled
    enableESPForAllPlayers()
end

-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Toggle ESP ‡πÉ‡∏ô UI
ESPTab:AddToggle("EnableESP", {
    Title = "Enable ESP (‡∏ó‡∏∞‡∏•‡∏∏‡∏Å‡∏≥‡πÅ‡∏û‡∏á)",
    Default = false,
    Callback = function(value)
        espEnabled = value
        enableESPForAllPlayers()
    end
})

-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Toggle ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÉ‡∏ô UI
ESPTab:AddToggle("EnableHealth", {
    Title = "Enable Health ESP",
    Default = false,
    Callback = function(value)
        healthEnabled = value
        enableESPForAllPlayers()
    end
})


end
